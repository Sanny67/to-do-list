{"version":3,"sources":["logo.svg","Components/InputForm/InputForm.js","Components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputForm","state","taskName","addTask","props","onAddTask","onInputChange","e","console","log","target","value","setState","className","Form","Group","as","Row","controlId","Col","sm","xs","Control","name","this","onChange","ButtonToolbar","Button","variant","onClick","React","Component","TodoList","tasks","todos","length","map","todo","onToggleCheck","block","Check","checked","completed","label","title","type","App","oldTodos","newTask","id","push","reverse","checkboxToggle","newTodos","t","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,4PC8C5BC,E,2MAnCXC,MAAQ,CACJC,SAAU,I,EAGdC,QAAU,WAEN,EAAKC,MAAMC,UAAU,EAAKJ,MAAMC,W,EAIpCI,cAAgB,SAACC,GACbC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CAACV,SAAUK,EAAEG,OAAOC,S,wEAIlC,OACA,yBAAKE,UAAU,QACX,4BAAI,0CACJ,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,sBAC3B,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACX,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,WAAWZ,MAAOa,KAAKvB,MAAMC,SAAUuB,SAAUD,KAAKlB,iBAE7E,kBAACa,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KACX,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAASL,KAAKrB,SAAhD,qB,GA5BJ2B,IAAMC,WC2BfC,G,uLA3BD,IAAD,OACDC,EAAQ,KACZ,OAAIT,KAAKpB,MAAM8B,MAAMC,QACjBF,EAAQT,KAAKpB,MAAM8B,MAAME,KAAI,SAAAC,GAEzB,OACI,yBAAKR,QAAS,kBAAM,EAAKzB,MAAMkC,cAAcD,IAAOE,OAAK,GACrD,kBAACzB,EAAA,EAAK0B,MAAN,CACIC,QAASJ,EAAKK,UACdC,MAAON,EAAKO,MACZC,KAAK,iBAUrB,yBAAKhC,UAAU,QACVoB,IAJE,sD,GApBIH,IAAMC,YC0Dde,E,2MArDb7C,MAAQ,CACNiC,MAAO,I,EAIX/B,QAAU,SAACD,GACTM,QAAQC,IAAI,WACZ,IAAIsC,EAAW,EAAK9C,MAAMiC,MACtBc,EAAU,CACVC,GAAIF,EAASZ,OAAS,EACtBS,MAAO1C,EACPwC,WAAW,GAIfK,EAASG,KAAKF,GACdD,EAAWA,EAASI,UAEpB,EAAKvC,SAAS,CAACsB,MAAOa,K,EAGxBK,eAAiB,SAACf,GAGhB,IAEIgB,EAFQ,EAAKpD,MAAMiC,MAEFE,KAAI,SAAAkB,GAErB,MAAO,CACHL,GAAIK,EAAEL,GACNL,MAAOU,EAAEV,MACTF,UAAWY,EAAEL,KAAOZ,EAAKY,IAAMK,EAAEZ,UAAYY,EAAEZ,cAIvDlC,QAAQC,IAAI4C,GAEZ,EAAKzC,SAAS,CAAEsB,MAAOmB,K,wEAKrB,OACE,yBAAKxC,UAAU,OACb,kBAAC0C,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWlD,UAAWmB,KAAKrB,UAC3B,kBAAC,EAAD,CAAU+B,MAAOV,KAAKvB,MAAMiC,MAAOI,cAAed,KAAK4B,uB,GAhD/CtB,IAAMC,WCGJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1ad89938.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './InputForm.css';\r\n// import TodoList from './Components/TodoList/TodoList';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass InputForm extends React.Component {\r\n\r\n    state = {\r\n        taskName: ''\r\n    }\r\n\r\n    addTask = () => {\r\n        // get the value\r\n        this.props.onAddTask(this.state.taskName);\r\n        //\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({taskName: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div className=\"wrap\">\r\n            <h2><u>To Do List</u></h2>\r\n            <Form>\r\n                <Form.Group as={Row} controlId=\"formPlaintextEmail\">\r\n                    <Col sm=\"9\" xs=\"8\">\r\n                        <Form.Control name=\"taskName\" value={this.state.taskName} onChange={this.onInputChange} />\r\n                    </Col>\r\n                    <Col sm=\"3\" xs=\"4\">\r\n                        <ButtonToolbar>\r\n                            <Button variant=\"outline-warning\" onClick={this.addTask}>Add Task</Button>\r\n                        </ButtonToolbar>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default InputForm;\r\n","import React from 'react';\r\nimport './TodoList.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass TodoList extends React.Component {\r\n\r\n\r\n    render() {\r\n        let tasks = null;\r\n        if (this.props.todos.length) {\r\n            tasks = this.props.todos.map(todo => {\r\n\r\n                return (\r\n                    <div onClick={() => this.props.onToggleCheck(todo)} block>\r\n                        <Form.Check\r\n                            checked={todo.completed}\r\n                            label={todo.title}\r\n                            type=\"checkbox\"\r\n                        />\r\n                    </div>\r\n                );\r\n\r\n            })\r\n        } else {\r\n            return <h3>Hey, Add some task</h3>\r\n        }\r\n        return (\r\n            <div className=\"list\">\r\n                {tasks}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport InputForm from './Components/InputForm/InputForm';\r\nimport TodoList from './Components/TodoList/TodoList';\r\n\r\n\r\n\r\nclass App extends React.Component  {\r\n\r\n  state = {\r\n    todos: [\r\n    ]\r\n}\r\n\r\naddTask = (taskName) => {\r\n  console.log(\"Entered\");\r\n  let oldTodos = this.state.todos;\r\n  var newTask = {\r\n      id: oldTodos.length + 1,\r\n      title: taskName,\r\n      completed: false\r\n  }\r\n\r\n\r\n  oldTodos.push(newTask);\r\n  oldTodos = oldTodos.reverse();\r\n\r\n  this.setState({todos: oldTodos})\r\n}\r\n\r\ncheckboxToggle = (todo) => {\r\n  // console.log('Hey I am running!', todo);\r\n\r\n  let todos = this.state.todos;\r\n\r\n  let newTodos = todos.map(t => {\r\n\r\n      return {\r\n          id: t.id,\r\n          title: t.title,\r\n          completed: t.id === todo.id ? !t.completed : t.completed\r\n      }\r\n  });\r\n\r\n  console.log(newTodos);\r\n\r\n  this.setState({ todos: newTodos });\r\n\r\n}\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Container>\r\n          <InputForm onAddTask={this.addTask} />\r\n          <TodoList todos={this.state.todos} onToggleCheck={this.checkboxToggle} />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}